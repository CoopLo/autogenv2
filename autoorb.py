
#################################################################################################
class Orbitals:
  ''' Class containing information defining a set of single-particle orbitals.
  - Basis set for the orbitals.
  - Coefficients of the orbitals in the basis.
  '''

  #----------------------------------------------------------------------------------------------
  def __init__(self):
    self.basis={}
    self.eigsys={}

  #----------------------------------------------------------------------------------------------
  def export_basis(self,ions,outfn):
    ''' Generate a basis section for QWalk.

    Args:
      cutoff_divider (float): Control how many unit cells to generate ghost centers around the simulation cell. 
        1 is one unit cell, 2 is one half a unit cell, and .5 is 2 unit cells.
        This should be generated by the Orbitals object.
      nspin (tuple): specifies number of orbitals that are occupied in each channel.
    Returns:
      list: lines pertaining to system section.
    '''
    hybridized_check = 0.0
    hybridized_check += sum(abs(basis['coef_s'] * basis['coef_p']))
    hybridized_check += sum(abs(basis['coef_p'] * basis['coef_dfg']))
    hybridized_check += sum(abs(basis['coef_s'] * basis['coef_dfg']))
    if hybridized_check > 1e-10:
      error("Hybridized AOs (like sp) not implmemented in write_basis(...)",
            "Not implemented.")

    # If there's no hybridization, at most one of coef_s, coef_p, and coef_dfg is
    # nonzero. Just add them, so we have one array.
    coefs = basis['coef_s'] + basis['coef_p'] + basis['coef_dfg']

    shell_type = np.tile("Unknown...",basis['shell_type'].shape)
    typemap = ["S","SP","P","5D","7F_crystal","G","H"]
    for i in range(5): shell_type[basis['shell_type']==i] = typemap[i]

    cnt = 0
    aidx = 0
    atom_type = ions['atom_nums'][aidx]
    outlines = [
        "basis {",
        "  {0}".format(periodic_table[atom_type-200-1]),
        "  aospline",
        "  normtype CRYSTAL",
        "  gamess {"
      ]
    done_atoms = set([atom_type])
    for sidx in range(len(shell_type)):
      new_aidx = basis['atom_shell'][sidx]-1

      new_atom_type = ions['atom_nums'][new_aidx]
      if aidx != new_aidx:
        if new_atom_type in done_atoms:
          continue
        else:
          outlines += ["  }","}"]
          atom_type = new_atom_type
          aidx = new_aidx
          outlines += [
              "basis {",
              "  {0}".format(periodic_table[atom_type-200-1]),
              "  aospline",
              "  normtype CRYSTAL",
              "  gamess {"
            ]
          done_atoms.add(atom_type)

      nprim = basis['prim_shell'][sidx]
      outlines.append("    {0} {1}".format(shell_type[sidx],nprim))
      for pidx in range(nprim):
        outlines.append("      {0} {1} {2}".format(
          pidx+1,
          basis['prim_gaus'][cnt],
          coefs[cnt]
        ))
        cnt += 1
    outlines += ["  }","}"]
    return outlines
